---

- hosts: localhost
  connection: local
  remote_user: ma
  become_method: sudo
  vars_files:
    - vars.yml
  tasks:
  - name: Remove ping.txt file
    become: true
    file: path="{{openils_path}}/var/web/ping.txt" state=absent
  - name: Stop Web services
    ignore_errors: yes
    become: true
    service:
      name: apache2
      state: stopped
# service module is broken for ansible/jammy/docker
  - name: Stopping apache2 manually
    ignore_errors: yes
    shell: /etc/init.d/apache2 stop
    when: ubuntu_version|lower == 'jammy'

  - name: Kill z39.50
    become: true
    ignore_errors: yes
    shell: ps aux | grep simple[2]zoom | awk '{print $2}' | xargs kill
  - name: Stop Websocketd
    become: true
    ignore_errors: yes
    shell: "/bin/ps -ef | /bin/grep osrf-websocket-stdio | /bin/grep -v apache | /bin/grep -v grep | /usr/bin/awk '{print $2}' | /usr/bin/xargs sudo kill -9"
  - name: Stop nginx Websockets proxy
    ignore_errors: yes
    become: true
    service:
      name: nginx
      state: stopped
# service module is broken for ansible/jammy/docker
  - name: Starting nginx manually
    ignore_errors: yes
    shell: /etc/init.d/nginx stop
    when: ubuntu_version|lower == 'jammy'
  - name: Stop OpenSRF
    become: true
    become_user: opensrf
    environment:
      PATH: "{{ ansible_env.PATH }}:{{openils_path}}/bin"
    shell: export PATH=$PATH:{{openils_path}}/bin && {{openils_path}}/bin/osrf_control --localhost --stop-all
  - name: Stop SIP
    become: true
    become_user: opensrf
    environment:
      PATH: "{{ ansible_env.PATH }}:{{openils_path}}/bin"
    shell: export PATH=$PATH:{{openils_path}}/bin && {{openils_path}}/bin/oils_ctl.sh -a stop_sip
  - name: Kill OpenSRF
    ignore_errors: yes
    shell: "/bin/ps -ef | /bin/grep OpenSRF | /bin/grep -v apache | /bin/grep -v grep | /usr/bin/awk '{print $2}' | /usr/bin/xargs sudo kill -9"
  - name: Kill SIP
    ignore_errors: yes
    shell: /bin/ps -ef | /bin/grep -i sip | /bin/grep -v apache | /bin/grep -v grep | /usr/bin/awk '{print $2}' | /usr/bin/xargs sudo kill -9
  - name: Stop redis-server
    become: true
    ignore_errors: yes
    service:
      name: redis-server
      state: stopped
  - name: Kill redis-server
    ignore_errors: yes
    shell: /bin/ps -ef | /bin/grep -i redis | /bin/grep -v grep | /usr/bin/awk '{print $2}' | /usr/bin/xargs sudo kill -9
  - name: Start redis-server
    ignore_errors: yes
    become: true
    service:
      name: redis-server
      state: started
# service module is broken for ansible/jammy/docker
  - name: Starting redis-server manually
    ignore_errors: yes
    shell: /etc/init.d/redis-server start
    when: ubuntu_version|lower == 'jammy'
  - name: Pausing for redis-server to start
    pause: seconds=5
  - name: Reset redis config
    become: true
    become_user: opensrf
    environment:
      PATH: "{{ ansible_env.PATH }}:{{openils_path}}/bin"
    shell: export PATH=$PATH:{{openils_path}}/bin && {{openils_path}}/bin/osrf_control -l --reset-message-bus

## we need to copy the incoming Evergreen repo into a local folder because Windows/Linux symlinks don't work together
  - name: Delete folder /home/opensrf/repos/Evergreen-build/Open-ILS/src/perlmods/lib/OpenILS
    file:
      path: /home/opensrf/repos/Evergreen-build/Open-ILS/src/perlmods/lib/OpenILS
      state: absent
  - name: rsync /home/opensrf/repos/Evergreen/Open-ILS/src/perlmods/lib/OpenILS -> /home/opensrf/repos/Evergreen-build/Open-ILS/src/perlmods/lib/OpenILS
    become: true
    ignore_errors: yes
    shell: rsync -a --exclude ".git" --exclude "node_modules" --no-owner --no-perms --size-only --chown 0:0 /home/opensrf/repos/Evergreen/Open-ILS/src/perlmods/lib/OpenILS/ /home/opensrf/repos/Evergreen-build/Open-ILS/src/perlmods/lib/OpenILS

  - name: rsync /home/opensrf/repos/Evergreen/Open-ILS/src/c-apps -> /home/opensrf/repos/Evergreen-build/Open-ILS/src/c-apps
    become: true
    ignore_errors: yes
    shell: rsync -a --exclude "Makefile" --no-owner --no-perms --size-only --chown 0:0 /home/opensrf/repos/Evergreen/Open-ILS/src/c-apps/ /home/opensrf/repos/Evergreen-build/Open-ILS/src/c-apps

  - name: Put the fm_IDL.xml in conf folder
    become: true
    ignore_errors: yes
    copy:
      owner: opensrf
      group: opensrf
      mode: 0644
      src: /home/opensrf/repos/Evergreen/Open-ILS/examples/fm_IDL.xml
      dest: /openils/conf/fm_IDL.xml

  - name: Put the fm_IDL.xml in reports folder
    become: true
    ignore_errors: yes
    copy:
      owner: opensrf
      group: opensrf
      mode: 0644
      src: /home/opensrf/repos/Evergreen/Open-ILS/examples/fm_IDL.xml
      dest: /openils/var/web/reports/fm_IDL.xml
    when: add_evergreen_language_support|bool == false

  - name: Put the localized fm_IDL.xml in reports folder
    become: true
    shell: cd /home/opensrf/repos/Evergreen/build/i18n && make install && cp /home/opensrf/repos/Evergreen/Open-ILS/web/reports/fm_IDL.xml {{ openils_path }}/var/web/reports/fm_IDL.xml && chown opensrf:opensrf {{ openils_path }}/var/web/reports/fm_IDL.xml
    when: add_evergreen_language_support|bool == true

  - name: Autoreconf
    become: true
    shell: cd /home/opensrf/repos/Evergreen-build && autoreconf -i

  - name: Configuring Evergreen code and make (for perl and C changes)
    become: true
    shell: cd /home/opensrf/repos/Evergreen-build && PATH={{openils_path}}/bin:$PATH ./configure --prefix={{openils_path}} --sysconfdir={{openils_path}}/conf && make

  - name: make install C changes
    become: true
    shell: cd /home/opensrf/repos/Evergreen-build/Open-ILS/src/c-apps && make install

  - name: Start OpenSRF
    become: true
    become_user: opensrf
    environment:
      PATH: "{{ ansible_env.PATH }}:{{openils_path}}/bin"
    shell: export PATH=$PATH:{{openils_path}}/bin && {{openils_path}}/bin/osrf_control --localhost --start-all
  - name: Pausing for OpenSRF to spawn Drones
    pause: seconds=5
  - name: Run autogen
    become: true
    become_user: opensrf
    environment:
      PATH: "{{ ansible_env.PATH }}:{{openils_path}}/bin"
    shell:  export PATH=$PATH:{{openils_path}}/bin && {{openils_path}}/bin/autogen.sh
  - name: Start SIP
    become: true
    become_user: opensrf
    environment:
      PATH: "{{ ansible_env.PATH }}:{{openils_path}}/bin"
    shell: "{{openils_path}}/bin/oils_ctl.sh -a start_sip"
### ## Start z39.50
  - name: Start z39.50 stuff
    become: true
    shell: /usr/bin/perl -w /usr/bin/simple2zoom -c {{openils_path}}/conf/dgo.conf -- -f {{openils_path}}/conf/xml2marc-yaz.cfg localhost:2210 localhost.org:210 -v all,sessiondetail,requestdetail,zoom,zoomdetails &
  - name: restarting cron
    ignore_errors: yes
    service:
      name: cron
      state: restarted
  - name: restarting cron
    ignore_errors: yes
    shell: /etc/init.d/cron stop
    when: ubuntu_version|lower == 'jammy'

  - name: Start Web services
    become: true
    ignore_errors: yes
    service:
      name: apache2
      state: started

  - name: Start Web services
    become: true
    ignore_errors: yes
    shell: /etc/init.d/apache2 start
    when: ubuntu_version|lower == 'jammy'

  - name: Starting websocketd
    become: true
    become_user: opensrf
    shell: '/egconfigs/start_websocketd'
  - name: Start nginx Websockets proxy
    become: true
    ignore_errors: yes
    service:
      name: nginx
      state: started

  - name: Start nginx Websockets proxy manually
    become: true
    ignore_errors: yes
    shell: /etc/init.d/nginx start
    when: ubuntu_version|lower == 'jammy'

  - name: starting cron
    ignore_errors: yes
    service:
      name: cron
      state: started
# service module is broken for ansible/jammy/docker
  - name: Starting cron manually
    ignore_errors: yes
    shell: /etc/init.d/cron restart
    when: ubuntu_version|lower == 'jammy'

  - name: Setup ping.txt
    remote_user: opensrf
    shell: echo pong > {{openils_path}}/var/web/ping.txt && chown opensrf:opensrf {{openils_path}}/var/web/ping.txt

...
