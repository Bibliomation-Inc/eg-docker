---
# Allowed values: xenial, bionic, focal, jammy
# Be sure and update Dockerfile to match the version that you are calling here
# For reference: xenial = 16.04, bionic = 18.04, focal = 20.04, jammy = 22.04
# NOTE: xenial is not supported due to the nodejs stack issues, but left here for reference in case you want to hack it
# Evergreen didn't support ubuntu bionic until version 3.3
  ubuntu_version: jammy
  evergreen_version: 3.15.1
# This is tempermental. If you turn this setting on, you might end up having to manually edit the resulting installation
# Particularly eg_vhost.conf
  add_evergreen_language_support: no
# You can manually assign the Evergreen git branch, or let this regular expression figure it out based on evergreen_version
  evergreen_git_branch: "{{ 'tags/rel_' + (evergreen_version|regex_replace('\\.', '_')) }}"

  evergreen_major_version: "{{evergreen_version|regex_replace('^(\\d*)\\..*$', '\\1') }}"
  evergreen_minor_version: "{{evergreen_version|regex_replace('^\\d*\\.(\\d*)\\.?.*$', '\\1') }}"
  evergreen_bug_version: "{{evergreen_version|regex_replace('^\\d*\\.\\d*\\.?(\\d*).*$', '\\1') }}"
  install_xul_client: "{% if (evergreen_major_version|int > 2 and evergreen_minor_version|int < 3) or evergreen_major_version|int == 2 %}yes{% else %}no{% endif %}"
  evergreen_stamp_id: "{{ 'rel_' + (evergreen_version|regex_replace('\\.', '_')) }}"
  postgres_version: "{% if evergreen_major_version|int == 3 and evergreen_minor_version|int > 13 %}15{% elif ubuntu_version|lower == 'jammy' or ubuntu_version|lower == 'focal' %}10{% elif ubuntu_version|lower == 'bionic' %}9.6{% else %}9.5{% endif %}"
  websocketd_version: 0.3.0
  websocketd_filename: "websocketd-{{ websocketd_version }}-linux_{% if ansible_architecture == 'aarch64' %}arm64{% else %}amd64{% endif %}.zip"
  angular_build_command: "ng build {% if (evergreen_major_version|int == 3 and evergreen_minor_version|int < 9) %}--prod{% else %}--configuration=production{% endif %}"

# The latest version of OpenSRF seems to work with all versions of Evergreen.
  opensrf_git_branch: osrf_rel_3_3_2

# This directory will be linked to /openilspath/var/web/.well-known
  lets_encrypt_shared_web_folder: /mnt/evergreen/letsencrypt_shared_web_directory/.well-known

# This variable will create a sym link to /openilspath/var/web/reporter  
  shared_reports_folder: /mnt/evergreen/reports

# This variable will create a sym link to /openilspath/var/web/notices  
  shared_circ_notices_folder: /mnt/evergreen/circ_notices
# Custom script to call during boot time. It needs to be exposed to the container
# errors are ignored, but this variable needs to exist. Set it to something regardless
# This is a mechanism for you to do something custom to the OS upon boot. Anything you can
# do with a shell script. Setting SSL certificates, putting in place custom tt2 files, etc.
  sync_openils_sub_folders_cmd: /mnt/evergreen/apps/syncope

  ejabberd_password: ejabberdpassword
  os_user_password: password
  openils_path: /openils

  domain_name: localhost.localdomain.org
  database_host: localhost
  database_database: evergreen
  database_port: 5432
  database_user: evergreen
  database_password: databasepassword
# Enhanced concerto: --load-concerto-enhanced
# Smaller concerto: --load-all-sample
  database_sample_data_set: --load-concerto-enhanced
  evergreen_global_admin: admin
  evergreen_global_admin_password: demo123
  sender_address: no-reply@localhost.com
  base_reporter_uri: https://localhost/reporter/
  reporter_output_folder: /openils/var/web/reporter
  opensrf_zip_file_line: <zips_file>/openils/conf/zips.txt</zips_file>
  opensrf_memcached_server: 127.0.0.1
  opensrf_memcached_port: 11211
  use_custom_opensrf_xml: no
# If you want to enable Anubis, provide the download path to the deb file
# if blank, it will not be enabled for the install
  anubis_deb_package: https://github.com/TecharoHQ/anubis/releases/download/v1.19.1/anubis_1.19.1_amd64.deb
# If you're setting up this container behind a load balancer, you'll need to provide
# a path to a centrally located txt file containing the pre-created key. Generate one like this:
# openssl rand -hex 32 > /mnt/evergreen/tmp/anubiskey.txt
  anubis_shared_secret_key_path:
  anubis_deb_file: "{{ (anubis_deb_package|regex_replace('.*/', '')) }}"
  anubis_start_cmd: anubis --target "https://localhost:7443" --target-insecure-skip-verify --use-remote-address {% if anubis_shared_secret_key_path| d(False) %}--ed25519-private-key-hex-file {{anubis_shared_secret_key_path}}{% endif %}
  Evergreen_cherry_picks: []
  OpenSRF_cherry_picks: []
  SIPServer_cherry_picks: []
  install_pg_tap: yes
...
